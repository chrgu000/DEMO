// 
// Generated by ActiveRecord Generator
// 
//
namespace PMMWS
{
    using Castle.ActiveRecord;
    using Castle.ActiveRecord.Queries;
    
    [ActiveRecord("[PMS_MWorker]")]
    public class Worker : ActiveRecordBase
    {
        
        private string _workerId;
        
        private string _workerName;
        
        private string _workerSSO;

        private string _type;

        private string _machineName;

        private string _faultReason;

        private string _sT;

        private string _cT;

        private string _worker;

        private string _eHS;

        private string _contents;

        private string _fType;

        private string _rName;

        [PrimaryKey(PrimaryKeyType.Assigned, "Worker_Id")]
        public string WorkerId
        {
            get
            {
                return this._workerId;
            }
            set
            {
                this._workerId = value;
            }
        }
        
        [Property(Column="Worker_Name")]
        public string WorkerName
        {
            get
            {
                return this._workerName;
            }
            set
            {
                this._workerName = value;
            }
        }
        
        [Property(Column="Worker_SSO")]
        public string WorkerSSO
        {
            get
            {
                return this._workerSSO;
            }
            set
            {
                this._workerSSO = value;
            }
        }
        
        [Property(Column = "Type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [Property(Column = "FType")]
        public string FType
        {
            get
            {
                return this._fType;
            }
            set
            {
                this._fType = value;
            }
        }
        
        [Property(Column = "Machine_Name")]
        public string MachineName
        {
            get
            {
                return this._machineName;
            }
            set
            {
                this._machineName = value;
            }
        }
        
        [Property(Column = "Fault_Reason")]
        public string FaultReason
        {
            get
            {
                return this._faultReason;
            }
            set
            {
                this._faultReason = value;
            }
        }
        [Property(Column = "ST")]
        public string ST
        {
            get
            {
                return this._sT;
            }
            set
            {
                this._sT = value;
            }
        }
        [Property(Column = "CT")]
        public string CT
        {
            get
            {
                return this._cT;
            }
            set
            {
                this._cT = value;
            }
        }

        [Property(Column = "RName")]
        public string RName
        {
            get
            {
                return this._rName;
            }
            set
            {
                this._rName = value;
            }
        }



        [Property(Column = "Worker")]
        public string MWorker
        {
            get
            {
                return this._worker;
            }
            set
            {
                this._worker = value;
            }
        }
           [Property(Column = "Contents")]
        public string Contents
        {
            get
            {
                return this._contents;
            }
            set
            {
                this._contents = value;
            }
        }
        [Property(Column = "EHS")]
        public string EHS
        {
            get
            {
                return this._eHS;
            }
            set
            {
                this._eHS = value;
            }
        }

        public static void DeleteAll()
        {
            ActiveRecordBase.DeleteAll(typeof(Worker));
        }
        
        public static Worker[] FindAll()
        {
            return ((Worker[])(ActiveRecordBase.FindAll(typeof(Worker))));
        }
        
        public static Worker Find(string WorkerId)
        {
            return ((Worker)(ActiveRecordBase.FindByPrimaryKey(typeof(Worker), WorkerId)));
        }

        public static Worker[] FindbyType(string type)
        {

            SimpleQuery qe = new SimpleQuery(typeof(Worker), @"from Worker where Type = ?", type);

            Worker[] Workers = (Worker[])ExecuteQuery(qe);
            return Workers;

        }

        public static Worker[] FindbyTypeAndCT(string type)
        {
            SimpleQuery qe = new SimpleQuery(typeof(Worker), @"from Worker where Type = ? and (CT is NOT NULL or CT != '')", type);
            Worker[] Workers = (Worker[])ExecuteQuery(qe);
            return Workers;
        }

        public static Worker[] FindbyTypeAndNULLCT(string type)
        {
            SimpleQuery qe = new SimpleQuery(typeof(Worker), @"from Worker where Type = ? and (CT is NULL or CT = '')", type);
            Worker[] Workers = (Worker[])ExecuteQuery(qe);
            return Workers;
        }
    }
}
