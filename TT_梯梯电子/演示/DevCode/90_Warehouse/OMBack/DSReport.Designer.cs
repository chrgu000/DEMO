//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Warehouse.OMBack {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DSReport")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DSReport : global::System.Data.DataSet {
        
        private DataTable1DataTable tableDataTable1;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DSReport() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DSReport(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTable1DataTable DataTable1 {
            get {
                return this.tableDataTable1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DSReport cln = ((DSReport)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDataTable1 = ((DataTable1DataTable)(base.Tables["DataTable1"]));
            if ((initTable == true)) {
                if ((this.tableDataTable1 != null)) {
                    this.tableDataTable1.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DSReport";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DSReport.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDataTable1 = new DataTable1DataTable();
            base.Tables.Add(this.tableDataTable1);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTable1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DSReport ds = new DSReport();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DataTable1RowChangeEventHandler(object sender, DataTable1RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTable1DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBackQty;
            
            private global::System.Data.DataColumn columncCode;
            
            private global::System.Data.DataColumn columnMODetailsID;
            
            private global::System.Data.DataColumn columncVenCode;
            
            private global::System.Data.DataColumn columncVenName;
            
            private global::System.Data.DataColumn columncInvCode;
            
            private global::System.Data.DataColumn columncInvName;
            
            private global::System.Data.DataColumn columncInvAddCode;
            
            private global::System.Data.DataColumn columncInvStd;
            
            private global::System.Data.DataColumn columniQuantity;
            
            private global::System.Data.DataColumn columniUnitPrice;
            
            private global::System.Data.DataColumn columniMoney;
            
            private global::System.Data.DataColumn columndStartDate;
            
            private global::System.Data.DataColumn columndArriveDate;
            
            private global::System.Data.DataColumn columnBackUnitQty;
            
            private global::System.Data.DataColumn columniNum;
            
            private global::System.Data.DataColumn columnUnitQty;
            
            private global::System.Data.DataColumn columnBOMQty;
            
            private global::System.Data.DataColumn columniSendQty;
            
            private global::System.Data.DataColumn columniSendNum;
            
            private global::System.Data.DataColumn columniSendUnitQty;
            
            private global::System.Data.DataColumn columnPInvCode;
            
            private global::System.Data.DataColumn columnPInvName;
            
            private global::System.Data.DataColumn columnMOMaterialsID;
            
            private global::System.Data.DataColumn columnMakerName;
            
            private global::System.Data.DataColumn columndDate;
            
            private global::System.Data.DataColumn columnHaveUsedQty;
            
            private global::System.Data.DataColumn columnRemainQty;
            
            private global::System.Data.DataColumn columnRemainNum;
            
            private global::System.Data.DataColumn columnMakeDate;
            
            private global::System.Data.DataColumn columnBarCode;
            
            private global::System.Data.DataColumn columnRow_Count;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1DataTable() {
                this.TableName = "DataTable1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTable1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackQtyColumn {
                get {
                    return this.columnBackQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cCodeColumn {
                get {
                    return this.columncCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODetailsIDColumn {
                get {
                    return this.columnMODetailsID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cVenCodeColumn {
                get {
                    return this.columncVenCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cVenNameColumn {
                get {
                    return this.columncVenName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cInvCodeColumn {
                get {
                    return this.columncInvCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cInvNameColumn {
                get {
                    return this.columncInvName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cInvAddCodeColumn {
                get {
                    return this.columncInvAddCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cInvStdColumn {
                get {
                    return this.columncInvStd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iQuantityColumn {
                get {
                    return this.columniQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iUnitPriceColumn {
                get {
                    return this.columniUnitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iMoneyColumn {
                get {
                    return this.columniMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dStartDateColumn {
                get {
                    return this.columndStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dArriveDateColumn {
                get {
                    return this.columndArriveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackUnitQtyColumn {
                get {
                    return this.columnBackUnitQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iNumColumn {
                get {
                    return this.columniNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitQtyColumn {
                get {
                    return this.columnUnitQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BOMQtyColumn {
                get {
                    return this.columnBOMQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iSendQtyColumn {
                get {
                    return this.columniSendQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iSendNumColumn {
                get {
                    return this.columniSendNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iSendUnitQtyColumn {
                get {
                    return this.columniSendUnitQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PInvCodeColumn {
                get {
                    return this.columnPInvCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PInvNameColumn {
                get {
                    return this.columnPInvName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOMaterialsIDColumn {
                get {
                    return this.columnMOMaterialsID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MakerNameColumn {
                get {
                    return this.columnMakerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dDateColumn {
                get {
                    return this.columndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HaveUsedQtyColumn {
                get {
                    return this.columnHaveUsedQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemainQtyColumn {
                get {
                    return this.columnRemainQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemainNumColumn {
                get {
                    return this.columnRemainNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MakeDateColumn {
                get {
                    return this.columnMakeDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarCodeColumn {
                get {
                    return this.columnBarCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Row_CountColumn {
                get {
                    return this.columnRow_Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row this[int index] {
                get {
                    return ((DataTable1Row)(this.Rows[index]));
                }
            }
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanging;
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanged;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleting;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTable1Row(DataTable1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row AddDataTable1Row(
                        decimal BackQty, 
                        string cCode, 
                        int MODetailsID, 
                        string cVenCode, 
                        string cVenName, 
                        string cInvCode, 
                        string cInvName, 
                        string cInvAddCode, 
                        string cInvStd, 
                        decimal iQuantity, 
                        decimal iUnitPrice, 
                        decimal iMoney, 
                        System.DateTime dStartDate, 
                        System.DateTime dArriveDate, 
                        decimal BackUnitQty, 
                        decimal iNum, 
                        decimal UnitQty, 
                        decimal BOMQty, 
                        decimal iSendQty, 
                        decimal iSendNum, 
                        decimal iSendUnitQty, 
                        string PInvCode, 
                        string PInvName, 
                        int MOMaterialsID, 
                        string MakerName, 
                        System.DateTime dDate, 
                        decimal HaveUsedQty, 
                        decimal RemainQty, 
                        decimal RemainNum, 
                        string MakeDate, 
                        string BarCode, 
                        string Row_Count) {
                DataTable1Row rowDataTable1Row = ((DataTable1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BackQty,
                        cCode,
                        MODetailsID,
                        cVenCode,
                        cVenName,
                        cInvCode,
                        cInvName,
                        cInvAddCode,
                        cInvStd,
                        iQuantity,
                        iUnitPrice,
                        iMoney,
                        dStartDate,
                        dArriveDate,
                        BackUnitQty,
                        iNum,
                        UnitQty,
                        BOMQty,
                        iSendQty,
                        iSendNum,
                        iSendUnitQty,
                        PInvCode,
                        PInvName,
                        MOMaterialsID,
                        MakerName,
                        dDate,
                        HaveUsedQty,
                        RemainQty,
                        RemainNum,
                        MakeDate,
                        BarCode,
                        Row_Count};
                rowDataTable1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataTable1Row);
                return rowDataTable1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataTable1DataTable cln = ((DataTable1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataTable1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBackQty = base.Columns["BackQty"];
                this.columncCode = base.Columns["cCode"];
                this.columnMODetailsID = base.Columns["MODetailsID"];
                this.columncVenCode = base.Columns["cVenCode"];
                this.columncVenName = base.Columns["cVenName"];
                this.columncInvCode = base.Columns["cInvCode"];
                this.columncInvName = base.Columns["cInvName"];
                this.columncInvAddCode = base.Columns["cInvAddCode"];
                this.columncInvStd = base.Columns["cInvStd"];
                this.columniQuantity = base.Columns["iQuantity"];
                this.columniUnitPrice = base.Columns["iUnitPrice"];
                this.columniMoney = base.Columns["iMoney"];
                this.columndStartDate = base.Columns["dStartDate"];
                this.columndArriveDate = base.Columns["dArriveDate"];
                this.columnBackUnitQty = base.Columns["BackUnitQty"];
                this.columniNum = base.Columns["iNum"];
                this.columnUnitQty = base.Columns["UnitQty"];
                this.columnBOMQty = base.Columns["BOMQty"];
                this.columniSendQty = base.Columns["iSendQty"];
                this.columniSendNum = base.Columns["iSendNum"];
                this.columniSendUnitQty = base.Columns["iSendUnitQty"];
                this.columnPInvCode = base.Columns["PInvCode"];
                this.columnPInvName = base.Columns["PInvName"];
                this.columnMOMaterialsID = base.Columns["MOMaterialsID"];
                this.columnMakerName = base.Columns["MakerName"];
                this.columndDate = base.Columns["dDate"];
                this.columnHaveUsedQty = base.Columns["HaveUsedQty"];
                this.columnRemainQty = base.Columns["RemainQty"];
                this.columnRemainNum = base.Columns["RemainNum"];
                this.columnMakeDate = base.Columns["MakeDate"];
                this.columnBarCode = base.Columns["BarCode"];
                this.columnRow_Count = base.Columns["Row_Count"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBackQty = new global::System.Data.DataColumn("BackQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackQty);
                this.columncCode = new global::System.Data.DataColumn("cCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncCode);
                this.columnMODetailsID = new global::System.Data.DataColumn("MODetailsID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODetailsID);
                this.columncVenCode = new global::System.Data.DataColumn("cVenCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncVenCode);
                this.columncVenName = new global::System.Data.DataColumn("cVenName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncVenName);
                this.columncInvCode = new global::System.Data.DataColumn("cInvCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncInvCode);
                this.columncInvName = new global::System.Data.DataColumn("cInvName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncInvName);
                this.columncInvAddCode = new global::System.Data.DataColumn("cInvAddCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncInvAddCode);
                this.columncInvStd = new global::System.Data.DataColumn("cInvStd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncInvStd);
                this.columniQuantity = new global::System.Data.DataColumn("iQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniQuantity);
                this.columniUnitPrice = new global::System.Data.DataColumn("iUnitPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniUnitPrice);
                this.columniMoney = new global::System.Data.DataColumn("iMoney", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniMoney);
                this.columndStartDate = new global::System.Data.DataColumn("dStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndStartDate);
                this.columndArriveDate = new global::System.Data.DataColumn("dArriveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndArriveDate);
                this.columnBackUnitQty = new global::System.Data.DataColumn("BackUnitQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackUnitQty);
                this.columniNum = new global::System.Data.DataColumn("iNum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniNum);
                this.columnUnitQty = new global::System.Data.DataColumn("UnitQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitQty);
                this.columnBOMQty = new global::System.Data.DataColumn("BOMQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBOMQty);
                this.columniSendQty = new global::System.Data.DataColumn("iSendQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniSendQty);
                this.columniSendNum = new global::System.Data.DataColumn("iSendNum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniSendNum);
                this.columniSendUnitQty = new global::System.Data.DataColumn("iSendUnitQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniSendUnitQty);
                this.columnPInvCode = new global::System.Data.DataColumn("PInvCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPInvCode);
                this.columnPInvName = new global::System.Data.DataColumn("PInvName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPInvName);
                this.columnMOMaterialsID = new global::System.Data.DataColumn("MOMaterialsID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOMaterialsID);
                this.columnMakerName = new global::System.Data.DataColumn("MakerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMakerName);
                this.columndDate = new global::System.Data.DataColumn("dDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndDate);
                this.columnHaveUsedQty = new global::System.Data.DataColumn("HaveUsedQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHaveUsedQty);
                this.columnRemainQty = new global::System.Data.DataColumn("RemainQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemainQty);
                this.columnRemainNum = new global::System.Data.DataColumn("RemainNum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemainNum);
                this.columnMakeDate = new global::System.Data.DataColumn("MakeDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMakeDate);
                this.columnBarCode = new global::System.Data.DataColumn("BarCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarCode);
                this.columnRow_Count = new global::System.Data.DataColumn("Row_Count", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRow_Count);
                this.columncCode.AllowDBNull = false;
                this.columncCode.MaxLength = 30;
                this.columncVenCode.MaxLength = 20;
                this.columncVenName.MaxLength = 98;
                this.columncInvCode.MaxLength = 20;
                this.columncInvName.MaxLength = 255;
                this.columncInvAddCode.MaxLength = 255;
                this.columncInvStd.MaxLength = 255;
                this.columniNum.ReadOnly = true;
                this.columnBOMQty.ReadOnly = true;
                this.columniSendUnitQty.ReadOnly = true;
                this.columnPInvCode.MaxLength = 20;
                this.columnPInvName.MaxLength = 255;
                this.columnMakerName.ReadOnly = true;
                this.columnMakerName.MaxLength = 1;
                this.columndDate.AllowDBNull = false;
                this.columnHaveUsedQty.ReadOnly = true;
                this.columnRemainQty.ReadOnly = true;
                this.columnRemainNum.ReadOnly = true;
                this.columnMakeDate.ReadOnly = true;
                this.columnMakeDate.MaxLength = 30;
                this.columnBarCode.ReadOnly = true;
                this.columnBarCode.MaxLength = 50;
                this.columnRow_Count.ReadOnly = true;
                this.columnRow_Count.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row NewDataTable1Row() {
                return ((DataTable1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataTable1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataTable1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTable1RowChanged != null)) {
                    this.DataTable1RowChanged(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTable1RowChanging != null)) {
                    this.DataTable1RowChanging(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTable1RowDeleted != null)) {
                    this.DataTable1RowDeleted(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTable1RowDeleting != null)) {
                    this.DataTable1RowDeleting(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTable1Row(DataTable1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSReport ds = new DSReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTable1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTable1Row : global::System.Data.DataRow {
            
            private DataTable1DataTable tableDataTable1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTable1 = ((DataTable1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BackQty {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.BackQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“BackQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.BackQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cCode {
                get {
                    return ((string)(this[this.tableDataTable1.cCodeColumn]));
                }
                set {
                    this[this.tableDataTable1.cCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MODetailsID {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.MODetailsIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“MODetailsID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.MODetailsIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cVenCode {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.cVenCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“cVenCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.cVenCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cVenName {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.cVenNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“cVenName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.cVenNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cInvCode {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.cInvCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“cInvCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.cInvCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cInvName {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.cInvNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“cInvName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.cInvNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cInvAddCode {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.cInvAddCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“cInvAddCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.cInvAddCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cInvStd {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.cInvStdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“cInvStd”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.cInvStdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal iQuantity {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.iQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“iQuantity”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.iQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal iUnitPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.iUnitPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“iUnitPrice”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.iUnitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal iMoney {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.iMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“iMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.iMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dStartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDataTable1.dStartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“dStartDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.dStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dArriveDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDataTable1.dArriveDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“dArriveDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.dArriveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BackUnitQty {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.BackUnitQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“BackUnitQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.BackUnitQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal iNum {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.iNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“iNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.iNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UnitQty {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.UnitQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“UnitQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.UnitQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BOMQty {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.BOMQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“BOMQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.BOMQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal iSendQty {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.iSendQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“iSendQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.iSendQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal iSendNum {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.iSendNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“iSendNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.iSendNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal iSendUnitQty {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.iSendUnitQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“iSendUnitQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.iSendUnitQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PInvCode {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.PInvCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“PInvCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.PInvCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PInvName {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.PInvNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“PInvName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.PInvNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MOMaterialsID {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.MOMaterialsIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“MOMaterialsID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.MOMaterialsIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MakerName {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.MakerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“MakerName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.MakerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dDate {
                get {
                    return ((global::System.DateTime)(this[this.tableDataTable1.dDateColumn]));
                }
                set {
                    this[this.tableDataTable1.dDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HaveUsedQty {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.HaveUsedQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“HaveUsedQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.HaveUsedQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RemainQty {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.RemainQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“RemainQty”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.RemainQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RemainNum {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.RemainNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“RemainNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.RemainNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MakeDate {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.MakeDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“MakeDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.MakeDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarCode {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.BarCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“BarCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.BarCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Row_Count {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.Row_CountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“Row_Count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.Row_CountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackQtyNull() {
                return this.IsNull(this.tableDataTable1.BackQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackQtyNull() {
                this[this.tableDataTable1.BackQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODetailsIDNull() {
                return this.IsNull(this.tableDataTable1.MODetailsIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODetailsIDNull() {
                this[this.tableDataTable1.MODetailsIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscVenCodeNull() {
                return this.IsNull(this.tableDataTable1.cVenCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcVenCodeNull() {
                this[this.tableDataTable1.cVenCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscVenNameNull() {
                return this.IsNull(this.tableDataTable1.cVenNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcVenNameNull() {
                this[this.tableDataTable1.cVenNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscInvCodeNull() {
                return this.IsNull(this.tableDataTable1.cInvCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcInvCodeNull() {
                this[this.tableDataTable1.cInvCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscInvNameNull() {
                return this.IsNull(this.tableDataTable1.cInvNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcInvNameNull() {
                this[this.tableDataTable1.cInvNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscInvAddCodeNull() {
                return this.IsNull(this.tableDataTable1.cInvAddCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcInvAddCodeNull() {
                this[this.tableDataTable1.cInvAddCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscInvStdNull() {
                return this.IsNull(this.tableDataTable1.cInvStdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcInvStdNull() {
                this[this.tableDataTable1.cInvStdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiQuantityNull() {
                return this.IsNull(this.tableDataTable1.iQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiQuantityNull() {
                this[this.tableDataTable1.iQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiUnitPriceNull() {
                return this.IsNull(this.tableDataTable1.iUnitPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiUnitPriceNull() {
                this[this.tableDataTable1.iUnitPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiMoneyNull() {
                return this.IsNull(this.tableDataTable1.iMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiMoneyNull() {
                this[this.tableDataTable1.iMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdStartDateNull() {
                return this.IsNull(this.tableDataTable1.dStartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdStartDateNull() {
                this[this.tableDataTable1.dStartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdArriveDateNull() {
                return this.IsNull(this.tableDataTable1.dArriveDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdArriveDateNull() {
                this[this.tableDataTable1.dArriveDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackUnitQtyNull() {
                return this.IsNull(this.tableDataTable1.BackUnitQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackUnitQtyNull() {
                this[this.tableDataTable1.BackUnitQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiNumNull() {
                return this.IsNull(this.tableDataTable1.iNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiNumNull() {
                this[this.tableDataTable1.iNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitQtyNull() {
                return this.IsNull(this.tableDataTable1.UnitQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitQtyNull() {
                this[this.tableDataTable1.UnitQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBOMQtyNull() {
                return this.IsNull(this.tableDataTable1.BOMQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBOMQtyNull() {
                this[this.tableDataTable1.BOMQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiSendQtyNull() {
                return this.IsNull(this.tableDataTable1.iSendQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiSendQtyNull() {
                this[this.tableDataTable1.iSendQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiSendNumNull() {
                return this.IsNull(this.tableDataTable1.iSendNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiSendNumNull() {
                this[this.tableDataTable1.iSendNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiSendUnitQtyNull() {
                return this.IsNull(this.tableDataTable1.iSendUnitQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiSendUnitQtyNull() {
                this[this.tableDataTable1.iSendUnitQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPInvCodeNull() {
                return this.IsNull(this.tableDataTable1.PInvCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPInvCodeNull() {
                this[this.tableDataTable1.PInvCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPInvNameNull() {
                return this.IsNull(this.tableDataTable1.PInvNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPInvNameNull() {
                this[this.tableDataTable1.PInvNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOMaterialsIDNull() {
                return this.IsNull(this.tableDataTable1.MOMaterialsIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOMaterialsIDNull() {
                this[this.tableDataTable1.MOMaterialsIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMakerNameNull() {
                return this.IsNull(this.tableDataTable1.MakerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMakerNameNull() {
                this[this.tableDataTable1.MakerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHaveUsedQtyNull() {
                return this.IsNull(this.tableDataTable1.HaveUsedQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHaveUsedQtyNull() {
                this[this.tableDataTable1.HaveUsedQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemainQtyNull() {
                return this.IsNull(this.tableDataTable1.RemainQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemainQtyNull() {
                this[this.tableDataTable1.RemainQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemainNumNull() {
                return this.IsNull(this.tableDataTable1.RemainNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemainNumNull() {
                this[this.tableDataTable1.RemainNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMakeDateNull() {
                return this.IsNull(this.tableDataTable1.MakeDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMakeDateNull() {
                this[this.tableDataTable1.MakeDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarCodeNull() {
                return this.IsNull(this.tableDataTable1.BarCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarCodeNull() {
                this[this.tableDataTable1.BarCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRow_CountNull() {
                return this.IsNull(this.tableDataTable1.Row_CountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRow_CountNull() {
                this[this.tableDataTable1.Row_CountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTable1RowChangeEvent : global::System.EventArgs {
            
            private DataTable1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1RowChangeEvent(DataTable1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Warehouse.OMBack.DSReportTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DataTable1TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataTable1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DataTable1";
            tableMapping.ColumnMappings.Add("BackQty", "BackQty");
            tableMapping.ColumnMappings.Add("cCode", "cCode");
            tableMapping.ColumnMappings.Add("MODetailsID", "MODetailsID");
            tableMapping.ColumnMappings.Add("cVenCode", "cVenCode");
            tableMapping.ColumnMappings.Add("cVenName", "cVenName");
            tableMapping.ColumnMappings.Add("cInvCode", "cInvCode");
            tableMapping.ColumnMappings.Add("cInvName", "cInvName");
            tableMapping.ColumnMappings.Add("cInvAddCode", "cInvAddCode");
            tableMapping.ColumnMappings.Add("cInvStd", "cInvStd");
            tableMapping.ColumnMappings.Add("iQuantity", "iQuantity");
            tableMapping.ColumnMappings.Add("iUnitPrice", "iUnitPrice");
            tableMapping.ColumnMappings.Add("iMoney", "iMoney");
            tableMapping.ColumnMappings.Add("dStartDate", "dStartDate");
            tableMapping.ColumnMappings.Add("dArriveDate", "dArriveDate");
            tableMapping.ColumnMappings.Add("BackUnitQty", "BackUnitQty");
            tableMapping.ColumnMappings.Add("iNum", "iNum");
            tableMapping.ColumnMappings.Add("UnitQty", "UnitQty");
            tableMapping.ColumnMappings.Add("BOMQty", "BOMQty");
            tableMapping.ColumnMappings.Add("iSendQty", "iSendQty");
            tableMapping.ColumnMappings.Add("iSendNum", "iSendNum");
            tableMapping.ColumnMappings.Add("iSendUnitQty", "iSendUnitQty");
            tableMapping.ColumnMappings.Add("PInvCode", "PInvCode");
            tableMapping.ColumnMappings.Add("PInvName", "PInvName");
            tableMapping.ColumnMappings.Add("MOMaterialsID", "MOMaterialsID");
            tableMapping.ColumnMappings.Add("MakerName", "MakerName");
            tableMapping.ColumnMappings.Add("dDate", "dDate");
            tableMapping.ColumnMappings.Add("HaveUsedQty", "HaveUsedQty");
            tableMapping.ColumnMappings.Add("RemainQty", "RemainQty");
            tableMapping.ColumnMappings.Add("RemainNum", "RemainNum");
            tableMapping.ColumnMappings.Add("MakeDate", "MakeDate");
            tableMapping.ColumnMappings.Add("BarCode", "BarCode");
            tableMapping.ColumnMappings.Add("Row_Count", "Row_Count");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = FrameBaseFunction.ClsBaseDataInfo.sConnString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = " SELECT \r\ncast(\'\'  as nvarchar(50)) as BarCode,\r\ncast(\'\'  as nvarchar(50)) as Row" +
                "_Count,\r\nm.cCode ,\r\n                        m.dDate ,\r\n                        d" +
                ".MODetailsID ,\r\n                        v.cVenCode ,\r\n                        v." +
                "cVenName ,\r\n                        I.cInvCode ,\r\n                        I.cInv" +
                "Name ,\r\n                        I.cInvAddCode ,\r\n                        I.cInvS" +
                "td ,\r\n                        CAST(d.iNum AS DECIMAL(18, 4)) AS iNum ,\r\n        " +
                "                d.iUnitPrice ,\r\n                        d.iMoney ,\r\n            " +
                "            d.dStartDate ,\r\n                        d.dArriveDate ,\r\n           " +
                "             CAST(NULL AS DECIMAL(18, 4)) AS BackQty ,\r\n                        " +
                "CAST(NULL AS DECIMAL(18, 4)) AS BackUnitQty ,\r\n                        d.iQuanti" +
                "ty AS UnitQty ,\r\n                        OD.fBaseQtyN / OD.fBaseQtyD AS BOMQty ," +
                "\r\n                        OD.iSendNum ,\r\n    \r\n                        ((ISNULL(" +
                "d.iReceivedQTY ,0) +ISNULL (d.iArrQTY,0))*(OD.fBaseQtyN / OD.fBaseQtyD )) AS Hav" +
                "eUsedQty,\r\n                        OD.iSendQty - ((ISNULL(d.iReceivedQTY ,0) +IS" +
                "NULL (d.iArrQTY,0))*(OD.fBaseQtyN / OD.fBaseQtyD )) AS RemainQty,\r\n             " +
                "           case when OD.iNum =0  then 0 else  (OD.iSendQty - ((ISNULL(d.iReceive" +
                "dQTY ,0) +ISNULL (d.iArrQTY,0))*(OD.fBaseQtyN / OD.fBaseQtyD )))*(OD.iQuantity/ " +
                "OD.iNum ) end  as RemainNum,\r\n                        CAST(OD.iQuantity AS DECIM" +
                "AL(18, 4)) AS iQuantity ,\r\n                        ( ISNULL(isendqty, 0) - ISNUL" +
                "L(iComplementQty, 0) ) iSendQty ,\r\n                        ( ( ISNULL(isendqty, " +
                "0) - ISNULL(iComplementQty, 0) ) ) / OD.fBaseQtyN\r\n                        / OD." +
                "fBaseQtyD AS iSendUnitQty ,\r\n                        IP.cInvCode AS PInvCode ,\r\n" +
                "                        IP.cInvName AS PInvName ,\r\n                        OD.MO" +
                "MaterialsID,\r\n                        \'\' as MakerName,\r\n                        " +
                "convert(nvarchar(30) ,getdate(),120) as MakeDate \r\n  \r\n                  FROM   " +
                "dbo.OM_MOMain M\r\n                        LEFT JOIN dbo.Vendor V ON M.cVenCode = " +
                "V.cVenCode\r\n                        LEFT JOIN dbo.OM_MODetails D ON M.MOID = D.M" +
                "OID\r\n                        LEFT JOIN dbo.OM_MOMaterials OD ON d.MODetailsID = " +
                "od.MoDetailsID\r\n                        LEFT JOIN dbo.Inventory I ON OD.cInvCode" +
                " = I.cInvCode\r\n                        LEFT JOIN dbo.Inventory IP ON D.cInvCode " +
                "= IP.cInvCode\r\n                 WHERE  1=-1 ";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DSReport.DataTable1DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DSReport.DataTable1DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DSReport.DataTable1DataTable dataTable = new DSReport.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(DSReport dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(DSReport dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(DSReport dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(DSReport dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" +
                        "eAdapter 实例。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591