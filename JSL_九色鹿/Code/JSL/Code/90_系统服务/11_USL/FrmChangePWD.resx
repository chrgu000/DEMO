<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAAACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAQIEAAEDBgADBQoABQcOAAkL
        EwAQExkAFxgdABscHgAeHh8AICAgACEhIgAhISIAISIjACIiJAAiIyUAIyQmACYnKgApKi0ALC4wADI2
        NAA1OjUANz42ADlINAA5Ui8AOWkkADp5HQA5gxkAN34iADN1LwAvZUEALltMAC1PWAAsS14AJ0VmACRA
        bwAiPHcAIDqAAB86hQAfO4kAIDyLACM/kQAmRJsAKEagAClIowApSKUAKkmnACpLqgAqTKwAK0yuACtN
        sAArT7IALVG1AC5UuAAvVrsAMVq+ADJcwAAzXsIANGDFADVjxwA2ZcoAN2jOADlt0wA9dtsAQX7jAESG
        6wBGi+8AR43xAEiP8wBIkfUASZL3AEmT9wBIkfcAR4/1AEaO9ABGjPMARYryAEWJ8QBFiPEARIfwAEOG
        7wBDhe4AQoPtAEGC7ABBgesAQIDrAEB/6gA/fuoAP37pAD596QA+e+gAPXnmADx45gA8d+UAO3bkADt1
        4wA6c+EAOXLgADlw3wA5b94AOG7dADht3AA4bNsAN2vaADdq2QA2aNgANmfYADVl1wAzY9UAM2LUADJh
        1AAxX9EAMF3PADBczAAwW8oAMFrJADBZxwAwWcYAL1nFADBZxAAvWcMAL1jBAC9XwAAvV8AALle/AC5W
        vgAuVbwALlS6AC5UuQAuVLgALlS3AC5TtgAvVLUAL1S0AC9TswAuUrEAL1OwADBTrQAxVaoAM1enADRY
        pAA1WaMANlqhADdanwA4W5wAOluZAD1bkwBCW4sASVt/AE9bdQBTXG4AVl1qAFhdaABbXmYAXWBnAGFj
        aABkZWcAZmdpAG1ubgB0dHQAeHh4AHx9fAB/f38AgYGBAIKCggCDhIMAhYWFAIeHhwCKiooAjIyMAI6O
        jgCOjo8Aj4+PAJCQkQCSkpIAlJSUAJiYmACdnZ0AoaGhAKSkpACmpqYAqampAKurrACvr68AtLS0ALe3
        twC5ubkAvLy8AL29vQC/v78AwcHBAMTExADIyMgAzMzMANPT0wDY2NgA3d3dAN/f3wDg4OAA4eHhAOLi
        4gDj4+MA4+PjAOPj4wDk5OQA5OTkAOTk5ADk5OQA5OTkAOXl5QDl5eUA5ubmAOfn5wDp6ekA6urqAOzs
        7ADt7e0A7+/vAPHx8QDz8/MA9PT0APb29gD4+PgA+Pj4APn5+QD6+voA+vr6APv7+wD7+/sA/Pz8APz8
        /AD9/f0A/f39AP7+/gD+/v4A/v7+AP7+/gD+/v4A/v7+AP7+/gD+/v4A/v7+AP7+/gD+/v4A/v7+AP//
        /wD+/v4ACgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoK
        CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDgoKDg8M
        CgoeHh4eCgoKCgoKCgoKCgoKCgoKCgoMgnp0PEREQkpCh4ctCiAqn6IKCgoKCgoKCgoKChA5QnSHEAoK
        ChmVX256jEWWLQqipaeoCgoKCgoKCgqTh3VwmxxCjGhoQisqbnV6R0U3Mw6nqKquCgoKCgoMf4J0dEhC
        aGhCYm5EbmJudXqMaDkyMwqqrrKyCgoKCjmHdHRKLxEZEZlodTcZGRkZk3o5RzU1Dq6ysrgKCgoOOXBu
        SjIRyOXIEZqTGbzV1bwZN39ojDMxCrK4ugoKCox/cGJiEcju7h4dERkdHu7u7rwZeodINzIPuLoKCgoK
        OUJuSkQZ5e7uph4ZGR6m7u7u1Rl6OWQ3NzIKCgoKCgo8bkpUjBHI7u7uyBEZ1e7u7u7VGUI5ZDc3MQoK
        CgoKCjlIVFRCmhHI5cgZmRm87u7u7rwZQoxkOTcxCgoKCgoKN2JUVIdJlhEZEZZKRhm81dW8GZNCf2Q8
        NzEKCgoKCgo3SlRYh0pQVIdQVFRKRBkZGRmTeHqHZDw3MQoKCgoKCjdKVFSMS1BUPFBQVFRkRGJiaG51
        QodkNTcxCgoKCgoQh0pUVDxQUFCMTVBUVEpAZGJobnQ8dWg5ljEPCgoKCgobQFRURGhQUEJKUFRUSkJJ
        YmhocIxuQjyWMhkKCgoKChk8SFRIPFBQRUZQTVRiRGJiaGh6h2I8hzcZCgoKCgoKChyMVFB0QlBNjEpU
        SmREYmRobkJ1bjw5MhkKCgoKCgoKGYdJUFQ8RlBKPEpiYkVKaEg8bmg3QjIZCgoKCgoKCgoKGURFVF96
        blBEOWJkREpoh0hoPIyHGQoKCgoKCgoKCgoKGYdIVFg8jEpuPG5AZEdkRIx4QhkKCgoKCgoKCgoKCgoK
        GRlGQmJ/OUd1GhoZLH96dRkZCgoKCgoKCgoKCgoKCgoKChkrPEp0hxkkJCQkGRkZCgoKCgoKCgoKCgoK
        CgoKCgoKCgoZGRkZChkkJBkKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKChkkJBkKCgoKCgoKCgoK
        CgoKCgoKCgoKCgoKCgoKCgoKChkkGQoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKGSQZCgoKCgoK
        CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKGQoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoK
        CgoKCgoKCgoKCv/////////////////AAP/+AAAf+AAAB/AAAAPgAAABwAAAAcAAAAGAAAADgAAAB4AA
        AAeAAAAHgAAAB4AAAAeAAAAHgAAAB8AAAAfAAAAP4AAAD+AAAB/wAAA/+AAAf/wAAP//AAP//8If////
        D////4////+P////3///////
</value>
  </data>
</root>